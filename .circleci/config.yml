# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: "prints the Circle CI Workflow ID from its environment variable"
    parameters:
      to:
        type: string
        default: $CIRCLE_WORKFLOW_ID
    steps:
      - run: echo << parameters.to >>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
      - print_pipeline_id
  print-hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: 'Print hello'
          command: echo $AUTHOR
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: mkdir -p udacity
      - run:
          name: 'output_to_file_workspace'
          command: echo "text to output here" > udacity/output.txt
      - persist_to_workspace:
          root: udacity
          paths:
            - output.txt
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/udacity
      - run:
          name: 'get_from_workspace'
          command: 'cat /tmp/udacity/output.txt'


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - save_hello_world_output
      - print_output_file:
          requires: [save_hello_world_output]

